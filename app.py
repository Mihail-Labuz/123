import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, f1_score
import streamlit as st
import time
from functools import lru_cache

# –ö—ç—à–∏—Ä—É–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
@st.cache_data
def train_model():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = pd.read_csv("email_phishing_data.csv")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤
    def locate_outliers(data):
        for col in data.select_dtypes(include=['number']):
            Q1 = df[col].quantile(0.25)
            Q3 = df[col].quantile(0.75)
            IQR = Q3 - Q1
            threshold = 1.5
            return data[(data[col] < Q1 - threshold * IQR) | (data[col] > Q3 + threshold * IQR)]
    
    outliers = locate_outliers(df)
    df = df.drop(outliers.index)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    features = [
        'num_words', 
        'num_unique_words', 
        'num_stopwords',
        'num_links', 
        'num_unique_domains', 
        'num_email_addresses',
        'num_spelling_errors', 
        'num_urgent_keywords'
    ]
    X = df[features]
    y = df['label']
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=0.2)
    
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train_scaled, y_train)
    
    # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
    y_pred = model.predict(X_test_scaled)
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    
    return model, scaler, features, accuracy, f1

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
def calculate_risk(model, scaler, features, input_values):
    input_df = pd.DataFrame([input_values], columns=features)
    scaled_data = scaler.transform(input_df)
    return model.predict_proba(scaled_data)[0][1]

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.set_page_config(
        page_title="PhishShield PRO",
        page_icon="üõ°Ô∏è",
        layout="centered",
        initial_sidebar_state="expanded"
    )

    # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
    st.markdown("""
    <style>
        .header-style {
            font-size: 24px;
            font-weight: bold;
            color: #2e86c1;
        }
        .metric-value {
            font-size: 28px !important;
            font-weight: bold !important;
        }
        .stSpinner > div {
            text-align: center;
            margin-top: 10px;
        }
        .risk-indicator {
            transition: all 0.5s ease;
        }
        .pulse-animation {
            animation: pulse 1.5s infinite;
        }
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
    </style>
    """, unsafe_allow_html=True)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    with st.spinner('–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏... –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥'):
        model, scaler, features, accuracy, f1 = train_model()

    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.markdown('<p class="header-style">PhishShield PRO</p>', unsafe_allow_html=True)
    st.caption("–î–µ—Ç–µ–∫—Ç–æ—Ä —Ñ–∏—à–∏–Ω–≥–æ–≤—ã—Ö –ø–∏—Å–µ–º —Å –ø–æ—Ä–æ–≥–æ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è 30%")

    # –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    with st.form("phish_form"):
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∏—Å—å–º–∞")
        
        input_values = {}
        cols = st.columns(2)
        
        with cols[0]:
            input_values['num_words'] = st.number_input("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤", min_value=0, value=120, key='num_words')
            input_values['num_unique_words'] = st.number_input("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞", min_value=0, value=80, key='num_unique_words')
            input_values['num_stopwords'] = st.number_input("–°—Ç–æ–ø-—Å–ª–æ–≤–∞", min_value=0, value=30, key='num_stopwords')
            input_values['num_links'] = st.number_input("–°—Å—ã–ª–∫–∏", min_value=0, value=2, key='num_links')
        
        with cols[1]:
            input_values['num_unique_domains'] = st.number_input("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã", min_value=0, value=1, key='num_unique_domains')
            input_values['num_email_addresses'] = st.number_input("Email –∞–¥—Ä–µ—Å–∞", min_value=0, value=1, key='num_email_addresses')
            input_values['num_spelling_errors'] = st.number_input("–û—à–∏–±–∫–∏", min_value=0, value=3, key='num_spelling_errors')
            input_values['num_urgent_keywords'] = st.number_input("–°—Ä–æ—á–Ω–æ—Å—Ç—å", min_value=0, value=5, key='num_urgent_keywords')
        
        submitted = st.form_submit_button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary")

    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∏—Å–∫–∞
    risk_display = st.empty()
    
    # –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    if any(input_values.values()):  # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        try:
            phishing_prob = calculate_risk(model, scaler, features, input_values)
            threshold = 0.3
            risk_level = "–í—ã—Å–æ–∫–∏–π" if phishing_prob >= threshold else "–ù–∏–∑–∫–∏–π"
            risk_color = "#e74c3c" if phishing_prob >= threshold else "#2ecc71"
            
            # –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞
            pulse_class = "pulse-animation" if phishing_prob >= threshold else ""
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞
            with risk_display.container():
                st.subheader("–¢–µ–∫—É—â–∏–π —Ä–∏—Å–∫ —Ñ–∏—à–∏–Ω–≥–∞")
                
                col1, col2 = st.columns([3, 1])
                with col1:
                    st.markdown(f"""
                    <div class="risk-indicator {pulse_class}" style="margin-bottom: 1rem;">
                        <div style="font-size: 16px; color: #7f8c8d;">–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ñ–∏—à–∏–Ω–≥–∞</div>
                        <div class="metric-value" style="color: {risk_color};">{phishing_prob*100:.1f}%</div>
                        <div style="font-size: 14px; color: #7f8c8d;">–ü–æ—Ä–æ–≥: {threshold*100:.0f}%</div>
                        <div style="font-size: 14px; color: {risk_color}; font-weight: bold;">{risk_level} —Ä–∏—Å–∫</div>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                    progress_bar = st.progress(0)
                    for percent_complete in range(int(phishing_prob*100)):
                        time.sleep(0.01)
                        progress_bar.progress(percent_complete + 1)
                    progress_bar.progress(float(phishing_prob))

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    if submitted:
        st.success("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤—ã—à–µ.")
        st.balloons()  # –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö —à–∞—Ä–∏–∫–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    with st.sidebar:
        st.header("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ")
        st.info("""
        **PhishShield PRO** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Å–µ–º –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ñ–∏—à–∏–Ω–≥–∞.
        –ü–æ—Ä–æ–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏.
        """)
        
        st.markdown("---")
        st.write("üìä **–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏:**")
        st.metric("–¢–æ—á–Ω–æ—Å—Ç—å", f"{accuracy:.2%}")
        st.metric("F1-score", f"{f1:.2%}")
        
        st.markdown("---")
        st.write("**üìå –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**")
        st.write("1. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∏—Å—å–º–∞")
        st.write("2. –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        st.write("3. –ù–∞–∂–º–∏—Ç–µ '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        
        st.markdown("---")
        st.write("**üîç –¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ñ–∏—à–∏–Ω–≥–∞:**")
        st.write("- –°—Ä–æ—á–Ω—ã–µ –ø—Ä–æ—Å—å–±—ã –∏–ª–∏ —É–≥—Ä–æ–∑—ã")
        st.write("- –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏/–≤–ª–æ–∂–µ–Ω–∏—è")
        st.write("- –û—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ –ø–∏—Å—å–º–∞")
        st.write("- –ù–µ–∑–Ω–∞–∫–æ–º—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏")
        st.write("- –ó–∞–ø—Ä–æ—Å –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

if __name__ == "__main__":
    main()